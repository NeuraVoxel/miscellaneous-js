/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: src/proto/message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace message {
    export class AwesomeMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            awesome_field?: string;
            count?: number;
            is_active?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("awesome_field" in data && data.awesome_field != undefined) {
                    this.awesome_field = data.awesome_field;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("is_active" in data && data.is_active != undefined) {
                    this.is_active = data.is_active;
                }
            }
        }
        get awesome_field() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set awesome_field(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_active() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_active(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            awesome_field?: string;
            count?: number;
            is_active?: boolean;
        }): AwesomeMessage {
            const message = new AwesomeMessage({});
            if (data.awesome_field != null) {
                message.awesome_field = data.awesome_field;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.is_active != null) {
                message.is_active = data.is_active;
            }
            return message;
        }
        toObject() {
            const data: {
                awesome_field?: string;
                count?: number;
                is_active?: boolean;
            } = {};
            if (this.awesome_field != null) {
                data.awesome_field = this.awesome_field;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.is_active != null) {
                data.is_active = this.is_active;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.awesome_field.length)
                writer.writeString(1, this.awesome_field);
            if (this.count != 0)
                writer.writeInt32(2, this.count);
            if (this.is_active != false)
                writer.writeBool(3, this.is_active);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AwesomeMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AwesomeMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.awesome_field = reader.readString();
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.is_active = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AwesomeMessage {
            return AwesomeMessage.deserialize(bytes);
        }
    }
}
